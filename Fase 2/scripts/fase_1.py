# -*- coding: utf-8 -*-
"""fase-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NLr2ec4hUHJUoopqG3u1Q-g2WpyxpInc

# Exploración de datos
"""

import pandas as pd
import numpy as np

train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

train.head()

test.head()

train.info()

test.info()

# train columna dataframe
train['datetime'] = pd.to_datetime(train['datetime'])
train['year'] = train['datetime'].dt.year
train['month'] = train['datetime'].dt.month
train['day'] = train['datetime'].dt.day
train['hour'] = train['datetime'].dt.hour
train['minute'] = train['datetime'].dt.minute
train['second'] = train['datetime'].dt.second

train.head()

# test columna dataframe
test['datetime'] = pd.to_datetime(test['datetime'])
test['year'] = test['datetime'].dt.year
test['month'] = test['datetime'].dt.month
test['day'] = test['datetime'].dt.day
test['hour'] = test['datetime'].dt.hour
test['minute'] = test['datetime'].dt.minute
test['second'] = test['datetime'].dt.second

test.head()

train['weekday'] = train['datetime'].dt.day_name()
test['weekday'] = test['datetime'].dt.day_name()

train.head()

train['season'] = train['season'].map({1:'Spring',
                                      2:'Summer',
                                      3:'Fall',
                                      4:'Winter'})
train['weather'] = train['weather'].map({1:'Clear',
                                        2:'Mist,Few Clouds',
                                        3:'Light Snow,Rain,Thunderstorm',
                                        4:'Heavy Rain, Thunderstorm, Snow, Fog'})

"""# Visualización de datos"""

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
# %matplotlib inline

"""**Mapa de distribución**"""

mpl.rc('font',size=15)
sns.displot(train['count']);

sns.displot(np.log(train['count']));

"""**Gráfico de barras**"""

fig, ax = plt.subplots(nrows=3,ncols=2)
plt.tight_layout()
fig.set_size_inches(15,10)
sns.barplot(x='year', y = 'count', data=train, ax = ax[0,0])
sns.barplot(x='month', y = 'count', data=train, ax = ax[0,1])
sns.barplot(x='day', y = 'count', data=train, ax = ax[1,0])
sns.barplot(x='hour', y = 'count', data=train, ax = ax[1,1])
sns.barplot(x='minute', y = 'count', data=train, ax = ax[2,0])
sns.barplot(x='second', y = 'count', data=train, ax = ax[2,1]);

"""**Diagrama de caja**"""

fig, ax = plt.subplots(nrows=2,ncols=2)
plt.tight_layout()
fig.set_size_inches(20,10)
sns.boxplot(x='season', y='count',data=train, ax = ax[0,0])
sns.boxplot(x='weather', y='count',data=train, ax = ax[0,1])
sns.boxplot(x='holiday', y='count',data=train, ax = ax[1,0])
sns.boxplot(x='workingday', y='count',data=train, ax = ax[1,1]);

ax[0,1].tick_params(axis='x', labelrotation=10)

"""**Trama de puntos**"""

fig, ax= plt.subplots(nrows=5)
plt.tight_layout()
fig.set_size_inches(12,18)

sns.pointplot(x='hour',y='count', data=train, hue='workingday', ax=ax[0])
sns.pointplot(x='hour',y='count', data=train, hue='holiday', ax=ax[1])
sns.pointplot(x='hour',y='count', data=train, hue='weekday', ax=ax[2])
sns.pointplot(x='hour',y='count', data=train, hue='season', ax=ax[3])
sns.pointplot(x='hour',y='count', data=train, hue='weather', ax=ax[4]);

"""**Gráfico de dispersión con línea de regresión**"""

fig, ax= plt.subplots(nrows=2,ncols=2)
plt.tight_layout()
fig.set_size_inches(7,6)

sns.regplot(x='temp', y='count', data=train, ax=ax[0,0],
            scatter_kws={'alpha':0.2}, line_kws={'color':'red'})
sns.regplot(x='atemp', y='count', data=train, ax=ax[0,1],
            scatter_kws={'alpha':0.2}, line_kws={'color':'red'})
sns.regplot(x='windspeed', y='count', data=train, ax=ax[1,0],
            scatter_kws={'alpha':0.2}, line_kws={'color':'red'})
sns.regplot(x='humidity', y='count', data=train, ax=ax[1,1],
            scatter_kws={'alpha':0.2}, line_kws={'color':'red'});

"""**Mapa de calor**"""

corr = train[['temp','atemp','humidity','windspeed','count']].corr()
sns.heatmap(corr, annot=True);

"""# Preprocesamiento de datos"""

import pandas as pd
import numpy as np

train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

#Eliminar valores atípicos
train = train[train['weather']!=4]

# train columna dataframe
train['datetime'] = pd.to_datetime(train['datetime'])
train['year'] = train['datetime'].dt.year
train['month'] = train['datetime'].dt.month
train['day'] = train['datetime'].dt.day
train['hour'] = train['datetime'].dt.hour

# test columna dataframe
test['datetime'] = pd.to_datetime(test['datetime'])
test['year'] = test['datetime'].dt.year
test['month'] = test['datetime'].dt.month
test['day'] = test['datetime'].dt.day
test['hour'] = test['datetime'].dt.hour

train['weekday'] = train['datetime'].dt.weekday
test['weekday'] = test['datetime'].dt.weekday

train.head()
test.head()

#Eliminar funciones innecesarias
train = train.drop(['casual','registered','datetime','month', 'windspeed'],axis=1)
test = test.drop(['datetime','month', 'windspeed'],axis=1)

# Especificar valor objetivo
target = train.pop('count')

train.head()

"""**Función indicadora de evaluación**"""

from sklearn.metrics import  mean_squared_log_error

def rmsle(y_val,pred):
    return mean_squared_log_error(y_val,pred)**0.5

"""# Entrenamiento modelo"""

#Regresión lineal
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
log_y=np.log(target)
lr.fit(train,log_y)
pred = lr.predict(train)

print('Valor RMSLE de regresión lineal: ',rmsle(log_y,pred))

pred = lr.predict(test)
exp_pred = np.exp(pred) #Conversión exponencial

pd.DataFrame({'count':exp_pred}).to_csv('predicciones.csv',index=False)