# -*- coding: utf-8 -*-
"""02 - run scripts

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nwaBCnqICyNDBMBjHdjLBKmlVrsirGg-

##Importación de librerías
"""

import pandas as pd
import joblib
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

"""##Entrenamiento del modelo con la data generada en 01 - generate data and model"""

train_data = pd.read_csv('train_new_data.csv')

# Convertir las fechas a Unix timestamp
train_data['datetime'] = pd.to_datetime(train_data['datetime'])
train_data['datetime'] = train_data['datetime'].apply(lambda x: x.timestamp())

X_train = train_data.drop("count", axis=1)  # Características
y_train = train_data["count"]  # Etiqueta

# Entrenar el modelo
model = LinearRegression()
model.fit(X_train, y_train)

# Guardar el modelo entrenado
joblib.dump(model, 'modelo_entrenado.pkl')
print("Modelo entrenado y guardado como 'modelo_entrenado.pkl'.")

"""##Predicciones"""

test_data = pd.read_csv('test_new_data.csv')

# Convertir las fechas a Unix timestamp
test_data['datetime'] = pd.to_datetime(test_data['datetime'])
test_data['datetime'] = test_data['datetime'].apply(lambda x: x.timestamp())

X_test = test_data.drop("count", axis=1)  # Características
y_test = test_data["count"]  # Etiquetas

# Cargar el modelo entrenado
loaded_model = joblib.load('modelo_entrenado.pkl')

# Realizar predicciones en los datos de prueba
predictions = loaded_model.predict(X_test)

# Guardar las predicciones en un archivo CSV
output = pd.DataFrame(predictions, columns=["Prediction"])
output.to_csv("predicciones.csv", index=False)

"""##Uso de predicciones y comparación con modelo objetivo"""

predictions_df = pd.read_csv('predicciones.csv')
targets = y_test.values

# Calcular la precisión
accuracy = np.mean(np.round(predictions) == targets)  # Redondeamos las predicciones
print(f"Accuracy on test: {accuracy:.3f}")

"""##Visualización de resultados"""

plt.figure(figsize=(10, 6))
plt.scatter(targets, predictions, color='blue', alpha=0.5)
plt.plot([targets.min(), targets.max()], [targets.min(), targets.max()], color='red', lw=2)
plt.xlabel("Valor Real")
plt.ylabel("Predicción")
plt.title("Predicciones vs Valores Reales")
plt.show()