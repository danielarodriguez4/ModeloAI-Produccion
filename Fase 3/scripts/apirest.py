# -*- coding: utf-8 -*-
"""apirest

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-WUJ8Ca9RIoyNwjlKGIjOUMQZaPSJeU4
"""

from flask import Flask, request, jsonify
import subprocess
import os
import pandas as pd

app = Flask(__name__)

# Rutas de archivos
TRAIN_SCRIPT = 'train.py'
PREDICT_SCRIPT = 'predict.py'
DEFAULT_TRAIN_FILE = 'train.csv'
DEFAULT_MODEL_FILE = 'modelo_entrenado.pkl'
PREDICTION_OUTPUT = 'predicciones.csv'

@app.route('/train', methods=['POST'])
def train():
    # Se ntrena un modelo usando train.py con un archivo CSV estándar
    try:
        data_file = request.json.get('data_file', DEFAULT_TRAIN_FILE)
        overwrite = request.json.get('overwrite', True)

        # Ejecución de train.py
        command = [
            'python', TRAIN_SCRIPT,
            '--data_file', data_file,
            '--model_file', DEFAULT_MODEL_FILE,
        ]

        if overwrite:
            command.append('--overwrite_model')

        subprocess.run(command, check=True)
        return jsonify({'message': f'Modelo entrenado y guardado en {DEFAULT_MODEL_FILE}.'})

    except subprocess.CalledProcessError as e:
        return jsonify({'error': f'Error ejecutando train.py: {str(e)}'}), 500

@app.route('/predict', methods=['POST'])
def predict():
    """Genera predicciones usando predict.py con un archivo de entrada CSV."""
    try:
        data_file = request.json.get('data_file', DEFAULT_TRAIN_FILE)
        output_file = request.json.get('output_file', PREDICTION_OUTPUT)

        # Ejecución de predict.py
        command = [
            'python', PREDICT_SCRIPT,
            '--data_file', data_file,
            '--model_file', DEFAULT_MODEL_FILE,
        ]

        subprocess.run(command, check=True)

        # Lectura del archivo de salida
        predictions = pd.read_csv(output_file).to_dict(orient='records')
        return jsonify({'predictions': predictions})

    except subprocess.CalledProcessError as e:
        return jsonify({'error': f'Error ejecutando predict.py: {str(e)}'}), 500

    except FileNotFoundError as e:
        return jsonify({'error': f'Archivo no encontrado: {str(e)}'}), 404

if __name__ == '__main__':
    app.run(debug=True)